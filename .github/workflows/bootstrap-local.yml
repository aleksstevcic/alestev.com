# This workflow will build a Node.js project and deploy it to an Azure Functions App on Windows or Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see:
#   - https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-node
#   - https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-typescript
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: "LOCAL: Deploy to alestev.com"

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  ALESTEV_URL: "https://alestev.com/api/n8n/update-site"
  
jobs:
  deploy:
    runs-on: self-hosted
    environment: dev
    steps:
    - name: shell
      run: |

        #needs to run as root
        apikey=${{secrets.PORTAINER_API_KEY}}
        gitkey=${{secrets.GIT_KEY}}

        git clone https://aleksstevcic:$gitkey@github.com/aleksstevcic/alestev.com
        cd alestev.com
        
        #variables. interfaces with portainer
        stackid="23"

        #build with the dockerfile in the same folder, and name it alestevcom
        #should be run within the root alestev.com folder
        docker build -t alestevcom --no-cache .

        #stop compose file that runs this server
        curl -X POST --insecure -I "https://localhost:9443/api/stacks/$stackid/stop" \
        -H "X-API-Key:$apikey"

        #wait a second
        sleep 1

        #start compose file that runs this server
        curl -X POST --insecure -I "https://localhost:9443/api/stacks/$stackid/start" \
        -H "X-API-Key:$apikey"

        #prune any untagged images
        yes | docker image prune
